{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/xufanxiong/anaconda3/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n",
      "  from ._conv import register_converters as _register_converters\n",
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.metrics import log_loss,mean_squared_error\n",
    "import keras\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense,Dropout,BatchNormalization\n",
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of rows and columns in all data set: (2400, 12)\n",
      "Number of rows and columns in x_data data set: (2400, 10)\n",
      "Number of rows and columns in labels data set: (2400, 2)\n"
     ]
    }
   ],
   "source": [
    "#Import the dataset\n",
    "ori = pd.read_csv('orig.csv')\n",
    "ori.head()\n",
    "\n",
    "#Drop two column\n",
    "ori = ori.drop(['id', 'number_of_total_atoms'], axis = 1)\n",
    "print('Number of rows and columns in all data set:',ori.shape)\n",
    "\n",
    "labels = ori[['formation_energy_ev_natom', 'bandgap_energy_ev']]\n",
    "x_data = ori.drop(['formation_energy_ev_natom', 'bandgap_energy_ev'], axis = 1)\n",
    "print('Number of rows and columns in x_data data set:',x_data.shape)\n",
    "print('Number of rows and columns in labels data set:',labels.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def split_data(validsize, testsize, x, y):\n",
    "    X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 1)\n",
    "    X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = testsize/(1-validsize), random_state = 1)\n",
    "    return X_train, X_val, X_test, y_train, y_val, y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1440, 10) (480, 10) (480, 10)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>spacegroup</th>\n",
       "      <th>percent_atom_al</th>\n",
       "      <th>percent_atom_ga</th>\n",
       "      <th>percent_atom_in</th>\n",
       "      <th>lattice_vector_1_ang</th>\n",
       "      <th>lattice_vector_2_ang</th>\n",
       "      <th>lattice_vector_3_ang</th>\n",
       "      <th>lattice_angle_alpha_degree</th>\n",
       "      <th>lattice_angle_beta_degree</th>\n",
       "      <th>lattice_angle_gamma_degree</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1462</th>\n",
       "      <td>206</td>\n",
       "      <td>0.1875</td>\n",
       "      <td>0.2500</td>\n",
       "      <td>0.5625</td>\n",
       "      <td>9.8238</td>\n",
       "      <td>9.8237</td>\n",
       "      <td>9.8238</td>\n",
       "      <td>90.0019</td>\n",
       "      <td>90.0020</td>\n",
       "      <td>89.9976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>12</td>\n",
       "      <td>0.2500</td>\n",
       "      <td>0.2500</td>\n",
       "      <td>0.5000</td>\n",
       "      <td>12.2649</td>\n",
       "      <td>3.1889</td>\n",
       "      <td>6.3388</td>\n",
       "      <td>90.0000</td>\n",
       "      <td>105.0943</td>\n",
       "      <td>90.0001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>206</td>\n",
       "      <td>0.6250</td>\n",
       "      <td>0.3750</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>9.1418</td>\n",
       "      <td>9.1413</td>\n",
       "      <td>9.1413</td>\n",
       "      <td>90.0039</td>\n",
       "      <td>90.0043</td>\n",
       "      <td>89.9967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>214</th>\n",
       "      <td>194</td>\n",
       "      <td>0.6875</td>\n",
       "      <td>0.3125</td>\n",
       "      <td>0.0000</td>\n",
       "      <td>6.1650</td>\n",
       "      <td>6.1648</td>\n",
       "      <td>23.5817</td>\n",
       "      <td>90.0177</td>\n",
       "      <td>89.9981</td>\n",
       "      <td>120.0032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2217</th>\n",
       "      <td>33</td>\n",
       "      <td>0.9062</td>\n",
       "      <td>0.0312</td>\n",
       "      <td>0.0625</td>\n",
       "      <td>9.8901</td>\n",
       "      <td>8.4916</td>\n",
       "      <td>9.1232</td>\n",
       "      <td>90.0055</td>\n",
       "      <td>90.0023</td>\n",
       "      <td>90.0012</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      spacegroup  percent_atom_al  percent_atom_ga  percent_atom_in  \\\n",
       "1462         206           0.1875           0.2500           0.5625   \n",
       "19            12           0.2500           0.2500           0.5000   \n",
       "970          206           0.6250           0.3750           0.0000   \n",
       "214          194           0.6875           0.3125           0.0000   \n",
       "2217          33           0.9062           0.0312           0.0625   \n",
       "\n",
       "      lattice_vector_1_ang  lattice_vector_2_ang  lattice_vector_3_ang  \\\n",
       "1462                9.8238                9.8237                9.8238   \n",
       "19                 12.2649                3.1889                6.3388   \n",
       "970                 9.1418                9.1413                9.1413   \n",
       "214                 6.1650                6.1648               23.5817   \n",
       "2217                9.8901                8.4916                9.1232   \n",
       "\n",
       "      lattice_angle_alpha_degree  lattice_angle_beta_degree  \\\n",
       "1462                     90.0019                    90.0020   \n",
       "19                       90.0000                   105.0943   \n",
       "970                      90.0039                    90.0043   \n",
       "214                      90.0177                    89.9981   \n",
       "2217                     90.0055                    90.0023   \n",
       "\n",
       "      lattice_angle_gamma_degree  \n",
       "1462                     89.9976  \n",
       "19                       90.0001  \n",
       "970                      89.9967  \n",
       "214                     120.0032  \n",
       "2217                     90.0012  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train, X_val, X_test, y_train, y_val, y_test = split_data(0.2, 0.2, x_data, labels)\n",
    "print(X_train.shape, X_val.shape, X_test.shape)\n",
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Convert DataFrame to numpy array\n",
    "X_train = X_train.as_matrix()\n",
    "X_val = X_val.as_matrix()\n",
    "X_test = X_test.as_matrix()\n",
    "y_train = y_train.as_matrix()\n",
    "y_val = y_val.as_matrix()\n",
    "y_test = y_test.as_matrix()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Normalize Data\n",
    "X_train_norm = (X_train - np.mean(X_train, axis=0, keepdims=True))/np.std(X_train, axis=0, keepdims=True)\n",
    "X_val_norm   = (X_val - np.mean(X_val, axis=0, keepdims=True))/np.std(X_val, axis=0, keepdims=True)\n",
    "X_test_norm  = (X_test - np.mean(X_test, axis=0, keepdims=True))/np.std(X_test, axis=0, keepdims=True)\n",
    "y_train_norm = (y_train - np.mean(y_train, axis=0, keepdims=True))/np.std(y_train, axis=0, keepdims=True)\n",
    "y_val_norm   = (y_val - np.mean(y_val, axis=0, keepdims=True))/np.std(y_val, axis=0, keepdims=True)\n",
    "y_test_norm  = (y_test - np.mean(y_test, axis=0, keepdims=True))/np.std(y_test, axis=0, keepdims=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create placeholder\n",
    "tf_xtrain = tf.placeholder(tf.float32, [None, X_train.shape[1]], name = 'tf_xtrain')\n",
    "tf_ytrain = tf.placeholder(tf.float32, [None, y_train.shape[1]], name = 'tf_ytrain')\n",
    "tf_xval   = tf.placeholder(tf.float32, [None, X_val.shape[1]], name = 'tf_xval')\n",
    "tf_yval   = tf.placeholder(tf.float32, [None, y_val.shape[1]], name = 'tf_yval')\n",
    "tf_xtest  = tf.placeholder(tf.float32, [None, X_test.shape[1]], name = 'tf_xtest')\n",
    "tf_ytest  = tf.placeholder(tf.float32, [None, y_test.shape[1]], name = 'tf_ytest')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"\\nW1 = tf.get_variable('W1', [1024, 10], dtype = tf.float32, initializer=tf.contrib.layers.xavier_initializer(seed=0))\\nb1 = tf.get_variable('b1', [1024, 1], dtype = tf.float32, initializer=tf.contrib.layers.xavier_initializer(seed=0))\\nW2 = tf.get_variable('W2', [512, 1024], dtype = tf.float32, initializer=tf.contrib.layers.xavier_initializer(seed=0))\\nb2 = tf.get_variable('b2', [512, 1],  dtype = tf.float32, initializer=tf.contrib.layers.xavier_initializer(seed=0))\\nW3 = tf.get_variable('W3', [64, 512], dtype = tf.float32, initializer=tf.contrib.layers.xavier_initializer(seed=0))\\nb3 = tf.get_variable('b3', [64, 1],  dtype = tf.float32, initializer=tf.contrib.layers.xavier_initializer(seed=0))\\nW4 = tf.get_variable('W4', [2, 64], dtype = tf.float32, initializer=tf.contrib.layers.xavier_initializer(seed=0))\\nb4 = tf.get_variable('b4', [2, 1],  dtype = tf.float32, initializer=tf.contrib.layers.xavier_initializer(seed=0))\\n\""
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Initialize Parameters\n",
    "'''\n",
    "W1 = tf.get_variable('W1', [1024, 10], dtype = tf.float32, initializer=tf.contrib.layers.xavier_initializer(seed=0))\n",
    "b1 = tf.get_variable('b1', [1024, 1], dtype = tf.float32, initializer=tf.contrib.layers.xavier_initializer(seed=0))\n",
    "W2 = tf.get_variable('W2', [512, 1024], dtype = tf.float32, initializer=tf.contrib.layers.xavier_initializer(seed=0))\n",
    "b2 = tf.get_variable('b2', [512, 1],  dtype = tf.float32, initializer=tf.contrib.layers.xavier_initializer(seed=0))\n",
    "W3 = tf.get_variable('W3', [64, 512], dtype = tf.float32, initializer=tf.contrib.layers.xavier_initializer(seed=0))\n",
    "b3 = tf.get_variable('b3', [64, 1],  dtype = tf.float32, initializer=tf.contrib.layers.xavier_initializer(seed=0))\n",
    "W4 = tf.get_variable('W4', [2, 64], dtype = tf.float32, initializer=tf.contrib.layers.xavier_initializer(seed=0))\n",
    "b4 = tf.get_variable('b4', [2, 1],  dtype = tf.float32, initializer=tf.contrib.layers.xavier_initializer(seed=0))\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nlay_1  = tf.layers.dense(tf_xtrain, 1024, activation=tf.nn.relu, use_bias=True, kernel_initializer=tf.contrib.layers.xavier_initializer(seed=0), bias_initializer=tf.zeros_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer)\\nlay_2  = tf.layers.dense(lay_1, 512, activation=tf.nn.relu, use_bias=True, kernel_initializer=tf.contrib.layers.xavier_initializer(seed=0), bias_initializer=tf.zeros_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer)\\nlay_3  = tf.layers.dense(lay_2, 64, activation=tf.nn.relu, use_bias=True, kernel_initializer=tf.contrib.layers.xavier_initializer(seed=0), bias_initializer=tf.zeros_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer)\\noutput = tf.layers.dense(lay_3, 2, activation=tf.nn.relu, use_bias=True, kernel_initializer=tf.contrib.layers.xavier_initializer(seed=0), bias_initializer=tf.zeros_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer)\\n'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Build NN\n",
    "'''\n",
    "lay_1  = tf.layers.dense(tf_xtrain, 1024, activation=tf.nn.relu, use_bias=True, kernel_initializer=tf.contrib.layers.xavier_initializer(seed=0), bias_initializer=tf.zeros_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer)\n",
    "lay_2  = tf.layers.dense(lay_1, 512, activation=tf.nn.relu, use_bias=True, kernel_initializer=tf.contrib.layers.xavier_initializer(seed=0), bias_initializer=tf.zeros_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer)\n",
    "lay_3  = tf.layers.dense(lay_2, 64, activation=tf.nn.relu, use_bias=True, kernel_initializer=tf.contrib.layers.xavier_initializer(seed=0), bias_initializer=tf.zeros_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer)\n",
    "output = tf.layers.dense(lay_3, 2, activation=tf.nn.relu, use_bias=True, kernel_initializer=tf.contrib.layers.xavier_initializer(seed=0), bias_initializer=tf.zeros_initializer(), kernel_regularizer=tf.contrib.layers.l2_regularizer)\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Build NN\n",
    "lay_1  = tf.layers.dense(tf_xtrain, 1024, use_bias=True, kernel_regularizer=tf.contrib.layers.l2_regularizer)\n",
    "lay_2  = tf.layers.dense(lay_1, 512, use_bias=True, kernel_regularizer=tf.contrib.layers.l2_regularizer)\n",
    "lay_3  = tf.layers.dense(lay_2, 64, use_bias=True, kernel_regularizer=tf.contrib.layers.l2_regularizer)\n",
    "output = tf.layers.dense(lay_3, 2, use_bias=True, kernel_regularizer=tf.contrib.layers.l2_regularizer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Compute Cost Function\n",
    "cost = tf.reduce_mean((output - tf_ytrain)**2)\n",
    "optimizer = tf.train.AdamOptimizer(learning_rate=0.000001).minimize(cost)\n",
    "init = tf.global_variables_initializer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 500/500 [00:33<00:00, 14.82it/s]\n"
     ]
    }
   ],
   "source": [
    "#Model\n",
    "costs = []\n",
    "with tf.Session() as sess:\n",
    "    for step in tqdm(range(500)):\n",
    "        sess.run(init)\n",
    "        _, t_cost = sess.run([optimizer, cost], feed_dict = {tf_xtrain: X_train_norm, tf_ytrain: y_train_norm})\n",
    "        costs.append(t_cost)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1c26130ac8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot costs\n",
    "plt.plot(costs)\n",
    "plt.xlabel('Number of iterations')\n",
    "plt.ylabel('Cost')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
